/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
$normal-name: 'normal';
$normal-x: 0px;
$normal-y: 0px;
$normal-offset-x: 0px;
$normal-offset-y: 0px;
$normal-width: 18px;
$normal-height: 15px;
$normal-total-width: 48px;
$normal-total-height: 151px;
$normal-image: './spritesmith/sprite.png';
$normal: (0px, 0px, 0px, 0px, 18px, 15px, 48px, 151px, './spritesmith/sprite.png', 'normal', );
$normal2-name: 'normal2';
$normal2-x: 0px;
$normal2-y: 25px;
$normal2-offset-x: 0px;
$normal2-offset-y: -25px;
$normal2-width: 18px;
$normal2-height: 15px;
$normal2-total-width: 48px;
$normal2-total-height: 151px;
$normal2-image: './spritesmith/sprite.png';
$normal2: (0px, 25px, 0px, -25px, 18px, 15px, 48px, 151px, './spritesmith/sprite.png', 'normal2', );
$red-name: 'red';
$red-x: 0px;
$red-y: 50px;
$red-offset-x: 0px;
$red-offset-y: -50px;
$red-width: 17px;
$red-height: 17px;
$red-total-width: 48px;
$red-total-height: 151px;
$red-image: './spritesmith/sprite.png';
$red: (0px, 50px, 0px, -50px, 17px, 17px, 48px, 151px, './spritesmith/sprite.png', 'red', );
$red2-name: 'red2';
$red2-x: 0px;
$red2-y: 77px;
$red2-offset-x: 0px;
$red2-offset-y: -77px;
$red2-width: 17px;
$red2-height: 17px;
$red2-total-width: 48px;
$red2-total-height: 151px;
$red2-image: './spritesmith/sprite.png';
$red2: (0px, 77px, 0px, -77px, 17px, 17px, 48px, 151px, './spritesmith/sprite.png', 'red2', );
$application-name: 'application';
$application-x: 0px;
$application-y: 104px;
$application-offset-x: 0px;
$application-offset-y: -104px;
$application-width: 48px;
$application-height: 47px;
$application-total-width: 48px;
$application-total-height: 151px;
$application-image: './spritesmith/sprite.png';
$application: (0px, 104px, 0px, -104px, 48px, 47px, 48px, 151px, './spritesmith/sprite.png', 'application', );
$spritesheet-width: 48px;
$spritesheet-height: 151px;
$spritesheet-image: './spritesmith/sprite.png';
$spritesheet-sprites: ($normal, $normal2, $red, $red2, $application, );
$spritesheet: (48px, 151px, './spritesmith/sprite.png', $spritesheet-sprites, );

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
